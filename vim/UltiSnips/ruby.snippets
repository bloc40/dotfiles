snippet #!
#!/usr/bin/ruby
endsnippet

snippet cl
class ${1:ClassName}
	$0
end
endsnippet

snippet C
class ${1:ControllerName}Controller < ApplicationController
	$0
end
endsnippet

snippet ini
def initialize(${1:args})
	$0
end
endsnippet

snippet def
def ${1:function_name}
	$0
end
endsnippet

snippet defs
def self.${1:function_name}
	$0
end
endsnippet

snippet defi
def initialize${1:(${2:args})}
	$0
end
endsnippet

snippet bt
belongs_to :${1:class}
endsnippet

snippet hm
has_many :${1:classes}
endsnippet

snippet aw
attr_writer :${1:attr}
endsnippet

snippet ar
attr_reader :${1:attr}
endsnippet

snippet aa
attr_accessor :${1:attr}
endsnippet

snippet case
case ${1:object}
when ${2:condition}
	${0}
end
endsnippet

snippet if
if ${1:condition}
	$0
end
endsnippet

snippet ife
if ${1:condition}
	$0
else

end
endsnippet

snippet unless
unless ${1:condition}
	$0
else
endsnippet

snippet while
while ${1:condition}
	$0
end
endsnippet

snippet p
puts '${1:1}'*80
endsnippet
#---------------------------------------------
#------------ RSpec --------------------------
#---------------------------------------------

snippet ex
expect($1).to ${2:eq} $0
endsnippet

snippet des
describe '$1' do
	$0
end
endsnippet

snippet desc
describe $1${2:Controller} do
	$0
end
endsnippet

snippet con
context '$1' do
	$0
end
endsnippet

snippet it
it '$1' do
	$0
end
endsnippet

snippet it{
it { $0 }
endsnippet

snippet bef
before do
	$0
end
endsnippet

snippet save
save_and_open_page
endsnippet

snippet bb
byebug
endsnippet

snippet debugger
byebug
endsnippet

snippet feat
feature '${1}' do
	scenario '${2}' do
		$0
	end
end
endsnippet

#---------------------------------------------
#------------ Shoulda ------------------------
#---------------------------------------------

snippet ivp
it { should validate_presence_of :${1:attribute} }
endsnippet

snippet ivu
it { should validate_uniqueness_of :${1:attribute} }
endsnippet

snippet ibt
it { should belong_to :${1:attribute} }
endsnippet

snippet ihm
it { should have_many :${1:attribute} }
endsnippet

snippet ir
it { should route(:${1:get}, '${2:url}').to(action: :${3:action}${4}) }
endsnippet

snippet task
desc '${1:description}'
task ${2:task name}: :environment do
	$0
end
endsnippet
