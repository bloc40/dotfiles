" allow Vim to manage multiple buffers effectively
set hidden

" auto save files when changed by another editor
set autoread

" ignore these files
set wildignore=*.swp,*.bak,*.pyc,*.class

" font size
set guifont=Monaco:h12

" add git branch to status line
set statusline=[%n]\ %*%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

" remove swap and backup files from working directory
set nobackup
set nowritebackup

" folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

" put the cursor in the split below window
set splitbelow

" make all operations work with the OS clipboard.
set clipboard=unnamed

" start the scrolling 3 lines before the border
set scrolloff=3

" clear white space in the end of lines
au BufWritePre * :%s/\s\+$//e

" autosave when focus is lost
au focuslost * silent! :wa

" additional Ruby syntax highliting
au BufRead,BufNewFile {Capfile,Gemfile,Gemfile.lock,Rakefile,Thorfile,config.ru,.caprc,.irbrc,irb_tempfile*} set ft=ruby

"------------------------------------------------------------------------
"---------------- Custom Mapping ----------------------------------------
"------------------------------------------------------------------------

" map for resizing windows
if bufwinnr(1)
  map + <C-W>+
  map - <C-W>-
  map ( <C-W><
  map ) <C-W>>
end

" jump between windows
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-h> <C-w>h
map <C-l> <C-w>l

" auto-indent the entire file
"map <D-L> gg=G<CR>''z.
map <D-L> gg=G``
map <leader>= gg=G``

" convert Ruby 1.8 to 1.9 hash syntax
map <D-H> :%s/:\([^ ]*\)\(\s*\)=>/\1:/gc<CR>

" convert string into a symbol
command! StrSym %s/\(['"]\)\([^ ]*\)\1/:\2/gc

" convert symbol into a string
command! SymStr %s/:\([^ ]*\)\(\s*\)/'\1'/gc

" open .vimrc.after
command! V tabe ~/.vimrc.after
" update .vimrc.after file
command! Vs so ~/.vimrc.after

" Get off my lawn!!!
nnoremap <Left>  :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up>    :echoe "Use k"<CR>
nnoremap <Down>  :echoe "Use j"<CR>

" scroll the viewport faster
nnoremap <C-e> 5<C-e>
nnoremap <C-y> 5<C-y>

" ctags with rails load path
map <leader>t :!rails runner 'puts $LOAD_PATH.join(" ")' \| xargs /usr/local/bin/ctags -R public/javascripts<CR>
map <leader>T :!rails runner 'puts $LOAD_PATH.join(" ")' \| xargs rdoc -f tags<CR>

" format JSON using Python's json.tool module
map <leader>j :%!python -m json.tool<CR>

" search
nmap <leader>s :%s/
vmap <leader>s :s/

" In command-line mode, <C-A> should go to the front of the line, as in bash.
cmap <C-A> <C-B>
